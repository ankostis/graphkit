######################
Plotting and Debugging
######################

.. _plotting:

Plotting
--------

For :ref:`debugging` it is necessary to visualize the graph-operation.
You may plot any :term:`plottable` and annotate on top the *execution plan* and
solution of the last computation, calling methods with arguments like this::

   netop.plot(True)                   # open a matplotlib window
   netop.plot("netop.svg")            # other supported formats: png, jpg, pdf, ...
   netop.plot()                       # without arguments return a pydot.DOT object
   netop.plot(solution=solution)      # annotate graph with solution values
   solution.plot()                    # plot solution only

... or for the last ...::

   solution.plot(...)

.. image:: images/executed_3ops.svg
    :alt: execution plan

.. figure:: images/GraphtikLegend.svg
   :alt:  Graphtik Legend
   :width: 100%

   The legend for all graphtik diagrams, generated by :func:`.legend()`.

The same :meth:`.Plottable.plot()` method applies also for:

- :class:`.NetworkOperation`
- :class:`.Network`
- :class:`.ExecutionPlan`
- :class:`~.network.Solution`

each one capable to producing diagrams with increasing complexity.
Whenever possible, the top-level ``plot()`` methods will delegate to the ones below;
specifically, the :term:`netop` keeps a transient reference to the last `plan`.
BUT the `plan` does not hold such a reference, you have to plot the `solution`.

For instance, when a net-operation has just been composed, plotting it will
come out bare bone, with just the 2 types of nodes (data & operations), their
dependencies, and the sequence of the execution-plan.

.. image:: images/barebone_3ops.svg
    :alt: barebone graph

But as soon as you run it, the net plot calls will print more of the internals.
Internally it delegates to :meth:`.ExecutionPlan.plot()` of :attr:`.NetworkOperation.last_plan`
attribute, which *caches* the last run to facilitate debugging.
If you want the bare-bone diagram, plot the network::

   netop.net.plot(...)

If you want all details, plot the solution::

   solution.net.plot(...)

.. Note::
   For plots, `Graphviz`_ program must be in your PATH,
   and ``pydot`` & ``matplotlib`` python packages installed.
   You may install both when installing ``graphtik`` with its ``plot`` extras::

      pip install graphtik[plot]

.. Tip::
   A description of the similar API to |pydot.Dot|_ instance returned by ``plot()``
   methods is here: https://pydotplus.readthedocs.io/reference.html#pydotplus.graphviz.Dot

.. _jupyter_rendering:

Jupyter notebooks
^^^^^^^^^^^^^^^^^
The |pydot.Dot|_ instances returned by
:meth:`.Plottable.plot()` are rendered directly in *Jupyter/IPython* notebooks
as SVG images.

You may increase the height of the SVG cell output with something like this::

      netop.plot(jupyter_render={"svg_element_styles": "height: 600px; width: 100%"})

See :data:`.default_jupyter_render` for those defaults and recommendations.


Sphinx-generated sites
^^^^^^^^^^^^^^^^^^^^^^
This library contains a new Sphinx extension (adapted from the :mod:`sphinx.ext.doctest`)
that can render :term:`plottable`\s in sites from python code in "doctests".

To enabled it, append module :mod:`graphtik.sphinxext` as a string in you :file:`docs/conf.py`
: ``extensions`` list, and then intersperse the :rst:dir:`graphtik` or :rst:dir:`graphtik-output`
directives with regular doctest-code to embed graph-plots into the site;  you may
refer to those plotted graphs with the :rst:role:`graphtik` role referring to
their `:name:` option(see :ref:`sphinxext-examples` below).

.. hint::
   Note that Sphinx is not doctesting the actual python modules, unless the plotting code
   has ended up, somehow, in the site (e.g. through some autodoc directive).
   Contrary to `pytest` and `doctest` standard module, the module's globals are not imported
   (until `sphinx#6590 <https://github.com/sphinx-doc/sphinx/issues/6590#issuecomment-554697671>`_
   is resolved), so you may need to import it in your doctests, like this:

   .. code-block:: rst

   .. doctest::
      :hide:

      .. Workaround sphinx-doc/sphinx#6590

      >> from <this.module> import *
      >> __name__ = "<this.module>"

   Unfortunately, you cannot use relative import, and have to write your module's full name.

Directives
~~~~~~~~~~
.. rst:directive::  graphtik

   Renders a figure with a :ref:`graphtik plots <plotting>` from doctest code.

   It supports:

   - all configurations from :mod:`sphinx.ext.doctest` sphinx-extension, plus
     those described below, in :ref:`graphtik-directive-configs`.

   - all options from `'doctest' directive
     <https://www.sphinx-doc.org/en/master/usage/extensions/doctest.html#directive-doctest>`_,

      - **hide**
      - **options**
      - **pyversion**
      - **skipif**

   - these options from :rst:dir:`image` directive, except ``target``
     (plot elements may already link to URLs):

      - **height**
      - **width**
      - **scale**
      - **class**
      - **alt**

   - these options from :rst:dir:`figure` directive:

      - **name**
      - **align**
      - **figwidth**
      - **figclass**

   - and the following new options:

      - **graphvar**
      - **graph-format**
      - **caption**

   Specifically the "interesting" options are these:

   .. rst:directive:option:: graphvar: (string, optional) varname
      :type: `str`

      the variable name containing what to render, which it can be:

      - an instance of :class:`.Plottable` (such as :class:`.NetworkOperation`,
         :class:`.Network`, :class:`.ExecutionPlan` or :class:`.Solution`);

      - an already plotted |pydot.Dot|_ instance, ie, the result of
        a :meth:`.Plottable.plot()` call

      If missing, it renders the last variable in the doctest code assigned with
      the above types.

   .. rst:directive:option:: graph-format: png | svg | svgz | pdf | `None`
      :type: choice, default: `None`

      if `None`, format decided according to active builder, roughly:
         - "html"-like: svg
         - "latex": pdf

      Note that SVGs support zooming, tooltips & URL links, while PNGs support
      image maps for linkable areas.

   .. rst:directive:option:: zoomable: <empty>, (true, 1, yes, on) | (false, 0, no, off)
      :type: `bool`

      Enable/disable interactive pan+zoom of SVGs;
      if missing/empty, :confval:`graphtik_zoomable` assumed.

   .. rst:directive:option:: zoomable-opts: <empty>, (true, 1, yes, on) | (false, 0, no, off)
      :type: `str`

      A JS-object with `the options <https://github.com/ariutta/svg-pan-zoom#how-to-use>`_
      for the interactive zoom+pan pf SVGs.
      If missing, :confval:`graphtik_zoomable_options` assumed.
      Specify ``{}`` explicitly to force library's default options.

   .. rst:directive:option:: name: link target id
      :type: `str`

      Make this netop a hyperlink target identified by this name.
      If :name: given and no :caption: given, one is created out of this,
      to act as a permalink.

   .. rst:directive:option:: caption: figure's caption
      :type: `str`

      Text to put underneath the netop.

   .. rst:directive:option:: alt
      :type: `str`

      If not given, derived from string representation of the :term:`netop`.

.. rst:directive::  graphtik-output

   Like :rst:dir:`graphtik`, but works like doctest's :rst:dir:`testoutput` directive.


.. rst:role:: graphtik

   An interpreted text role to refer to graphs plotted by :rst:dir:`graphtik` or
   :rst:dir:`graphtik-output` directives by their ``:name:``  option.


.. _graphtik-directive-configs:

Configurations
~~~~~~~~~~~~~~
.. Note:
   - All configurations from `'doctest' directive
     <https://www.sphinx-doc.org/en/master/usage/extensions/doctest.html#directive-doctest>`_ apply.

.. confval:: graphtik_default_graph_format

   - type: `Union[str, None]`
   - default: None

   The file extension of the generated plot images (without the leading dot `.``),
   used  when no ``:graph-format:`` option is given in a :rst:dir:`graphtik` or
   :rst:dir:`graphtik-output` directive.

   If `None`, the format is chosen from :confval:`graphtik_graph_formats_by_builder`
   configuration.

.. confval:: graphtik_graph_formats_by_builder

   - type: `Map[str, str]`
   - default: check the sources

   a dictionary defining which plot image formats to choose, depending on the active builder.

   - Keys are regexes matching the name of the active builder;
   - values are strings from the supported formats for `pydot`_ library,
     e.g. ``png`` (see :func:`.supported_plot_formats()`).

   If a builder does not match to any key, and no format given in the directive,
   no graphtik plot is rendered; so by default, it only generates plots for html & latex.

.. confval:: graphtik_zoomable_svg

   - type: `bool`
   - default: ``True``

   Whether to render SVGs with the `zoom-and-pan javascript library
   <https://github.com/ariutta/svg-pan-zoom>`_, unless the ``:zoomable:``
   directive-option is given (and not empty).

   .. Attention::
      Zoom-and-pan does not work in Sphinx sites for Chrome locally - serve
      the HTML files through some HTTP server, e.g. launch this command
      to view the site of this project::

            python -m http.server 8080 --directory build/sphinx/html/


.. confval:: graphtik_zoomable_options

   - type: `str`
   - default: ``{controlIconsEnabled: true, zoomScaleSensitivity: 0.4, fit: true}``

   A JS-object with `the options <https://github.com/ariutta/svg-pan-zoom#how-to-use>`_
   for the interactive zoom+pan pf SVGs, when the ``:zoomable-opts:`` directive option
   is missing.
   If empty, ``{}`` assumed (library's default options).


.. confval:: graphtik_plot_keywords

   - type: `dict`
   - default: ``{}``

   Arguments or :func:`.build_pydot()` to apply when rendering plottables.


.. confval:: graphtik_save_dot_files
   - type: `bool`, `None`
   - default: ``None``

   For debugging purposes, stores another :file:`<img>.txt` file next to each image file
   with the DOT text that produced it.

   When ``none`` (default), controlled by :func:`.config.is_debug` from
   :term:`configurations` (which by default obeys to :envvar:`GRAPHTIK_DEBUG`
   environment variable), otherwise, any boolean takes precedence here.


.. confval:: graphtik_warning_is_error

   - type: `bool`
   - default: ``false``

   If false, suppress doctest errors, and avoid failures when building site
   with ``-W`` option, since these are unrelated to the building of the site.


:confval:`doctest_test_doctest_blocks` :green:`(foreign config)`
   Don't disable doctesting of *literal-blocks*, ie,
   don't reset the :confval:`doctest_test_doctest_blocks` configuration value, or else,
   such code would be invisible to :rst:dir:`graphtik` directive.

:confval:`trim_doctest_flags` :green:`(foreign config)`
   This configuration is forced to ``False`` (default was ``True``).

   .. Attention::
      This means that in the rendered site, options-in-comments like ``# doctest: +SKIP``
      and ``<BLACKLINE>`` artifacts will be visible.


.. _plot-customizations:

Plot customizations
~~~~~~~~~~~~~~~~~~~~
:term:`plotter`\s` & theme constants
   Rendering of plots is performed by :class:`.plot.Plotter` instances.
   All `Graphviz`_ styling attributes are defined on :class:`.plot.Theme`
   class, which if not overridden, it is the instance in the :attr:`.Plotter.default_theme`
   attribute.

   You may customize the theme and/or *plotter* behavior with various methods,
   ordered by breadth of the effects (most broadly effecting method at the top):

   0. (*zero because it is discouraged!*)

      Modify in-place :class:`.Theme` class attributes, monkeypatch :class:`.Plotter` methods.

      This is the most invasive method, affecting all *FUTURE ONLY(!)* themes and
      and plotter instances (past and future) during a python session.

   1. Modify the :attr:`.default_theme` attribute of the :term:`default active plotter`,
      like that::

         get_active_plotter().default_theme.kw_op["fillcolor"] = "purple"

      This will affect all :meth:`.Plottable.plot()` calls for a python session.

   2. Create a new :class:`.Plotter` with customized :attr:`.Plotter.default_theme`, or
      clone and customize the theme of an existing plotter by the use of
      its :meth:`.Plotter.with_styles` method, and make that the new *active plotter*.

      - This will affect all calls in :class:`context <contextvars.ContextVar>`.
      - If customizing theme constants is not enough, you may subclass and install
        a new ``Plotter`` class.

   3. Pass `theme` or `plotter` arguments when calling :meth:`.Plottable.plot()`:

         netop.plot(plotter=Plotter(kw_legend=None))
         netop.plot(theme=Theme(include_steps=True)

      You may inherit and override Plotter's methods that way.

      Alternatively, you may clone and customize an existing plotter, to preserve
      its pre-existing customizations::

         netop.plot(theme=some_theme.with_set(include_steps=True))
         netop.plot(plotter=get_active_plotter().with_styles(kw_legend=None))


   This project dogfoods (3) in its own :file:`docs/source/conf.py` sphinx file.
   In particular, it configures the base-url of operation node links
   (by default, nodes do not link to any url).


.. _sphinxext-examples:

Examples
~~~~~~~~
The following directive renders a diagram of its doctest code, beneath it:

.. code-block:: rst

   .. graphtik::
      :graphvar: addmul
      :name: addmul-operation

      >>> from graphtik import compose, operation
      >>> addmul = compose(
      ...       "addmul",
      ...       operation(name="add", needs="abc".split(), provides="ab")(lambda a, b, c: (a + b) * c)
      ... )

.. graphtik::
   :graphvar: addmul
   :name: addmul-operation
   :hide:

   >>> from graphtik import compose, operation

   >>> addmul = compose(
   ...    "addmul",
   ...    operation(name="add", needs="abc".split(), provides="ab")(lambda a, b, c: (a + b) * c)
   ... )

which you may :graphtik:`reference <addmul-operation>` with this syntax:

.. code-block:: rst

   you may :graphtik:`reference <addmul-operation>` with ...

.. hint::
   In this case, the ``:graphvar:`` parameter is not really needed, since
   the code contains just one variable assignment receiving a subclass
   of :class:`.Plottable` or |pydot.Dot|_ instance.

   Additionally, the doctest code producing the :term:`plottable`\s does not have
   to be contained in the *graphtik* directive as a whole.

   So the above could have been simply written like this:

   .. code-block:: rst

      >>> from graphtik import compose, operation
      >>> addmul = compose(
      ...       "addmul",
      ...       operation(name="add", needs="abc".split(), provides="ab")(lambda a, b, c: (a + b) * c)
      ... )

      .. graphtik::
         :name: addmul-operation


.. _debugging:

Errors & debugging
------------------

Graphs may become arbitrary deep.  Launching a debugger-session to inspect
deeply nested stacks is notoriously hard

As an aid, you may either increase the logging verbosity, enable the :func:`.set_debug()`
:term:`configurations` function, or both.

   .. Tip::
      The various :mod:`.network` objects & exceptions print augmented string-representations
      when :func:`.config.set_debug` flag, which you may enable it with :envvar:`GRAPHTIK_DEBUG`
      environment variable.

      From code you may wrap the code you are interested in with :func:`.config.debug_enabled`
      "context-manager", to get augmented print-outs for selected code-paths only.

Additionally, when some operation fails, the original exception gets annotated
with the following properties, as a debug aid:

>>> from graphtik import compose, operation
>>> from pprint import pprint

>>> def scream(*args):
...     raise ValueError("Wrong!")

>>> try:
...     compose("errgraph",
...             operation(name="screamer", needs=['a'], provides=["foo"])(scream)
...     )(a=None)
... except ValueError as ex:
...     pprint(ex.jetsam)
{'aliases': None,
 'args': {'kwargs': {}, 'positional': [None], 'varargs': []},
 'network': Network(x3 nodes, x1 ops: screamer),
 'operation': FunctionalOperation(name='screamer', needs=['a'], provides=['foo'], fn='scream'),
 'outputs': None,
 'plan': ExecutionPlan(needs=['a'], provides=['foo'], x1 steps: screamer),
 'provides': None,
 'results_fn': None,
 'results_op': None,
 'solution': {'a': None},
 'task': OpTask(FunctionalOperation(name='screamer', needs=['a'], provides=['foo'], fn='scream'), sol_keys=['a'])}


In interactive *REPL* console you may use this to get the last raised exception::

     import sys

     sys.last_value.jetsam


The following annotated attributes *might* have meaningful value on an exception:

``network``
   the innermost network owning the failed operation/function

``plan``
   the innermost plan that executing when a operation crashed

``operation``
   the innermost operation that failed

``args``
    either the input arguments list fed into the function, or a dict with
    both ``args`` & ``kwargs`` keys in it.

``outputs``
    the names of the outputs the function was expected to return

``provides``
    the names eventually the graph needed from the operation;
    a subset of the above, and not always what has been declared in the operation.

``fn_results``
    the raw results of the operation's function, if any

``op_results``
    the results, always a dictionary, as matched with operation's `provides`

``solution``
    an instance of :class:`.Solution`, contains `inputs` & `outputs` till the error happened;
    note that :attr:`.Solution.executed` contain the list of executed `operations` so far.

Of course you may use many of the above "jetsam" values when plotting.

.. note::
   The :ref:`plotting` capabilities, along with the above annotation of exceptions
   with the internal state of plan/operation often renders a debugger session
   unnecessary.  But since the state of the annotated values might be incomplete,
   you may not always avoid one.
