# Render it manually with this command, and remember to update result in git:
#
#   dot docs/GraphtikFlowchart.dot -Tsvg -odocs/source/images/GraphtikFlowchart-vX.Y.Z.svg
#
digraph {
    label="graphtik-v4.1.0 flowchart";
    labelloc=t;

    operations  [shape=parallelogram fontname="italic" URL="https://graphtik.readthedocs.io/en/latest/arch.html#term-operation"];
    compose     [fontname="italic" URL="https://graphtik.readthedocs.io/en/latest/arch.html#term-composition"];
    network     [shape=parallelogram fontname="italic" URL="https://graphtik.readthedocs.io/en/latest/arch.html#term-network"];
    inputs      [shape=rect label="input names" URL="https://graphtik.readthedocs.io/en/latest/arch.html#term-inputs"];
    outputs     [shape=rect label="output names" URL="https://graphtik.readthedocs.io/en/latest/arch.html#term-outputs"];
    predicate     [shape=rect label="node predicate" URL="https://graphtik.readthedocs.io/en/latest/arch.html#term-node-predicate"];
    subgraph cluster_compute {
        label=compute
        fontname=bold
        style=dashed;
        labelloc=b;

        compile     [fontname="italic" URL="https://graphtik.readthedocs.io/en/latest/arch.html#term-compilation"];
        plan        [shape=parallelogram label="execution plan" fontname="italic" URL="https://graphtik.readthedocs.io/en/latest/arch.html#term-execution-plan"];
        execute     [fontname=italic fontname="italic" URL="https://graphtik.readthedocs.io/en/latest/arch.html#term-execution"];
    }
    values      [shape=rect label="input values" URL="https://graphtik.readthedocs.io/en/latest/arch.html#term-inputs"];
    solution    [shape=parallelogram URL="https://graphtik.readthedocs.io/en/latest/arch.html#term-solution"];

    operations -> compose -> network    [arrowhead=vee];
    {network inputs outputs predicate} -> compile -> plan  [arrowhead=vee];
    {plan values} -> execute -> solution [arrowhead=vee];
}